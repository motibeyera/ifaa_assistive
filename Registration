import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:myvision/views/menu_page.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;
import 'package:flutter_tts/flutter_tts.dart';
import 'package:myvision/views/login_view.dart';

class RegisterView extends StatefulWidget {
  const RegisterView({Key? key}) : super(key: key);

  @override
  // ignore: library_private_types_in_public_api
  _RegisterViewState createState() => _RegisterViewState();
}

class _RegisterViewState extends State<RegisterView> {
  final stt.SpeechToText _speechToText = stt.SpeechToText();
  final FlutterTts _flutterTts = FlutterTts();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  String _emailErrorText = '';
  String _passwordErrorText = '';

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  Future<bool> _initializeSpeechToText() async {
    bool available = await _speechToText.initialize();
    if (!available) {
      setState(() {});
    }
    return available;
  }

  Future<void> _speak(String text) async {
    await _flutterTts.speak(text);
  }

  void _startListeningEmail() async {
    bool available = await _initializeSpeechToText();
    if (available) {
      _speechToText.listen(
        onResult: (result) {
          if (result.finalResult) {
            String email = result.recognizedWords.replaceAll(' ', '');
            email = email.replaceAll('at', '@'); // Replace 'at' with '@'
            setState(() {
              _emailController.text = email.toLowerCase();
            });

            _speak('You have entered $email. Is it correct?');
            _listenForConfirmation();
          }
        },
      );
    }
  }

  void _listenForConfirmation() async {
    bool available = await _initializeSpeechToText();
    if (available) {
      _speechToText.listen(
        onResult: (result) {
          if (result.finalResult) {
            String response = result.recognizedWords.toLowerCase();
            if (response.contains('yes')) {
              // User confirmed, remove email part
              String currentText = _emailController.text;
              int atIndex = currentText.indexOf('@');
              if (atIndex != -1) {
                setState(() {
                  _emailController.text = currentText.substring(atIndex + 1);
                });
              }
            } else if (response.contains('no')) {
              setState(() {
                _emailController.text = '';
              });
            }
          }
        },
      );
    }
  }

  void _startListeningPasswordWithDelay() async {
    await Future.delayed(const Duration(seconds: 2));
    _startListeningPassword();
  }

  void _startListeningPassword() async {
    bool available = await _initializeSpeechToText();
    if (available) {
      _speechToText.listen(
        onResult: (result) {
          if (result.finalResult) {
            String password = result.recognizedWords.replaceAll(' ', '');
            setState(() {
              _passwordController.text = result.recognizedWords;
            });

            _speak('You have entered $password. Is it correct?');

            _speechToText.stop(); // Stop listening temporarily

            Future.delayed(const Duration(seconds: 3), () {
              _speechToText.listen(
                onResult: (result) {
                  String userResponse = result.recognizedWords.toLowerCase();
                  if (userResponse.contains('no')) {
                    setState(() {
                      _passwordController.text = '';
                    });
                    _speak('The password was removed! please try again.');
                  } else if (userResponse.contains('yes')) {
                    // Remove the password part
                    String enteredText = _passwordController.text;
                    String updatedText = enteredText.replaceAll(password, '');
                    setState(() {
                      _passwordController.text = updatedText.trim();
                    });
                    _speak(
                        'Password entered successfully. Please press the register button to register successfully.');
                  } else {
                    _speak(
                        'Sorry, I didn\'t understand your response. Is the entered password correct?');
                  }

                  _speechToText.stop(); // Stop listening after user's response
                },
              );
            });
          }
        },
      );
    }
  }

  void _validateFields() {
    setState(() {
      _emailErrorText = '';
      _passwordErrorText = '';

      if (_emailController.text.isEmpty) {
        _emailErrorText = 'Please enter your email address';
        _speak(_emailErrorText);
      } else if (!_emailController.text.contains('@')) {
        _emailErrorText = 'Invalid email address';
        _speak(_emailErrorText);
      }

      if (_passwordController.text.isEmpty) {
        _passwordErrorText = 'Please enter your password';
        _speak(_passwordErrorText);
      } else if (_passwordController.text.length < 6) {
        _passwordErrorText = 'Weak password';
        _speak(_passwordErrorText);
      }

      if (_emailErrorText.isEmpty && _passwordErrorText.isEmpty) {
        _registerUser();
      }
    });
  }

  Future<void> _registerUser() async {
    try {
      UserCredential userCredential =
          await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: _emailController.text,
        password: _passwordController.text,
      );
      if (userCredential.user != null) {
        // ignore: use_build_context_synchronously
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const MenuPage(),
          ),
        );
      }
    } catch (e) {
      String errorMessage = 'Registration failed: $e';
      _speak(errorMessage);
    }
  }

  void _startListeningEmailWithDelay() async {
    await Future.delayed(const Duration(seconds: 2));
    _startListeningEmail();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: Firebase.initializeApp(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          return Scaffold(
            backgroundColor: Colors.grey[300],
            body: SafeArea(
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(
                      Icons.email,
                      size: 100,
                    ),
                    const SizedBox(height: 75),
                    Text(
                      'Ifaa Assistive',
                      style: GoogleFonts.bebasNeue(
                        fontSize: 52,
                      ),
                    ),
                    const SizedBox(height: 5),
                    const Text(
                      'Empowering communication ',
                      style: TextStyle(
                        fontSize: 19,
                      ),
                    ),
                    const SizedBox(height: 30),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 25.0),
                      child: Container(
                        decoration: BoxDecoration(
                            color: Colors.grey[200],
                            border: Border.all(color: Colors.white),
                            borderRadius: BorderRadius.circular(12)),
                        child: Padding(
                          padding: const EdgeInsets.only(left: 20.0),
                          child: TextFormField(
                            controller: _emailController,
                            keyboardType: TextInputType.emailAddress,
                            decoration: InputDecoration(
                              border: InputBorder.none,
                              labelText: 'Email',
                              errorText: _emailErrorText,
                            ),
                            onTap: () {
                              _speak('Enter your Email');
                              _startListeningPasswordWithDelay();
                            },
                            validator: (value) {
                              if (value!.isEmpty) {
                                return 'Please enter your email address';
                              } else if (!value.contains('@')) {
                                return 'Invalid email address';
                              }
                              return null;
                            },
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 10),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 25.0),
                      child: Container(
                        decoration: BoxDecoration(
                            color: Colors.grey[200],
                            border: Border.all(color: Colors.white),
                            borderRadius: BorderRadius.circular(12)),
                        child: Padding(
                          padding: const EdgeInsets.only(left: 20.0),
                          child: TextFormField(
                            controller: _passwordController,
                            obscureText: true,
                            decoration: InputDecoration(
                              border: InputBorder.none,
                              labelText: 'Password',
                              errorText: _passwordErrorText,
                            ),
                            onTap: () {
                              _speak('Enter your Password');
                              _startListeningEmailWithDelay();
                            },
                            validator: (value) {
                              if (value!.isEmpty) {
                                return 'Please enter your password';
                              } else if (value.length < 6) {
                                return 'Weak password';
                              }
                              return null;
                            },
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 10),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 25.0),
                      child: GestureDetector(
                        onTap: () {
                          _validateFields();
                        },
                        child: Container(
                          padding: const EdgeInsets.all(25),
                          decoration: BoxDecoration(
                            color: Colors.deepPurple,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Center(
                            child: Text(
                              'Sign Up',
                              style: TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 40),
                            ),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 25),
                    GestureDetector(
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const LoginView(),
                          ),
                        );
                      },
                      child: const Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            ' Already have an account?',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Text(
                            '  Login now!',
                            style: TextStyle(
                              color: Colors.blue,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        }
        return const Scaffold(
          body: Center(
            child: CircularProgressIndicator(),
          ),
        );
      },
    );
  }
}
