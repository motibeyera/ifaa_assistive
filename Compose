import 'package:logger/logger.dart';
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server.dart';
import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;

class ComposeEmailPage extends StatefulWidget {
  const ComposeEmailPage({Key? key}) : super(key: key);

  @override
  // ignore: library_private_types_in_public_api
  _ComposeEmailPageState createState() => _ComposeEmailPageState();
}

class _ComposeEmailPageState extends State<ComposeEmailPage> {
  final stt.SpeechToText _speechToText = stt.SpeechToText();
  final FlutterTts _tts = FlutterTts();
  final Logger _logger = Logger();

  String recipientEmail = '';
  String subject = '';
  String body = '';
  String speechRecognitionErrorMessage = '';
  bool isListening = false;

  @override
  void dispose() {
    super.dispose();
    _tts.stop();
  }

  void _speak(String text) async {
    await _tts.speak(text);
  }

  Future<bool> _initializeSpeechToText() async {
    bool available = await _speechToText.initialize();
    if (!available) {
      setState(() {
        speechRecognitionErrorMessage =
            'Speech recognition is not available on this device';
      });
    }
    return available;
  }

  Future<void> _startListeningWithDelay(
      String prompt, Function(String) onResult) async {
    await Future.delayed(const Duration(seconds: 1)); // Add a 3-second delay

    bool available = await _initializeSpeechToText();
    if (available) {
      _speak(prompt);
      setState(() {
        isListening = true;
      });
      await Future.delayed(const Duration(seconds: 3));
      _speechToText.listen(
        onResult: (result) {
          if (result.finalResult) {
            setState(() {
              isListening = false;
            });
            onResult(result.recognizedWords);
          }
        },
      );
    }
  }

  void _promptRecipientEmail() {
    _startListeningWithDelay('Please enter the recipient\'s email address',
        (result) {
      setState(() {
        recipientEmail = result.replaceAll(' ', '');
        result.replaceAll('at', '@');
        recipientEmail = recipientEmail.toLowerCase();
      });
      _speak('You have entered $result. Is it correct?');
    });
  }

  void _promptSubject() {
    _startListeningWithDelay('Please enter the subject of the email', (result) {
      setState(() {
        subject = result;
      });
      _speak('You have entered the subject of the email. $result');
    });
  }

  void _promptBody() {
    _startListeningWithDelay('Please enter the body of the email', (result) {
      setState(() {
        body = result;
      });
      _speak('You have entered the body of the email. Should I send it?');
    });
  }

  void _sendEmail() async {
    final TextEditingController emailController = TextEditingController();
    final TextEditingController passwordController = TextEditingController();

    await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Enter Email and Password'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: emailController,
                decoration: const InputDecoration(labelText: 'Email'),
              ),
              TextField(
                controller: passwordController,
                decoration: const InputDecoration(labelText: 'Password'),
                obscureText: true,
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close the dialog
              },
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () {
                String username = emailController.text;
                String password = passwordController.text;
                _sendEmailWithCredentials(username, password);
                Navigator.of(context).pop(); // Close the dialog
              },
              child: const Text('Send Email'),
            ),
          ],
        );
      },
    );
  }

  void _sendEmailWithCredentials(String username, String password) async {
    final smtpServer = gmail(username, password);

    final message = Message()
      ..from = Address(username, 'Your Name')
      ..recipients.add(recipientEmail)
      ..subject = subject
      ..text = body;

    try {
      final sendReport = await send(message, smtpServer);
      _logger.i('Message sent: ${sendReport.toString()}');
      _speak('Email sent successfully!');
    } catch (e) {
      _logger.e('Error sending email: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[300],
      body: SafeArea(
        child: SingleChildScrollView(
          child: Container(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: <Widget>[
                const SizedBox(height: 50),
                const Row(
                  children: [
                    Text(
                      'Compose',
                      style: TextStyle(
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      ' Page',
                      style: TextStyle(
                        fontSize: 28,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 50),
                if (isListening)
                  const Text(
                    'Listening...',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 25.0),
                  child: Container(
                    decoration: BoxDecoration(
                        color: Colors.grey[200],
                        border: Border.all(color: Colors.white),
                        borderRadius: BorderRadius.circular(12)),
                    child: Padding(
                      padding: const EdgeInsets.only(left: 20.0),
                      child: TextFormField(
                        decoration: const InputDecoration(
                          border: InputBorder.none,
                          labelText: ' Recipient\'s Email',
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 40),
                if (recipientEmail.isNotEmpty)
                  Text('Recipient\'s Email: $recipientEmail'),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 25.0),
                  child: Container(
                    height: 80, // Increase the height here
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      border: Border.all(color: Colors.white),
                      borderRadius: BorderRadius.circular(15),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.only(left: 20.0),
                      child: TextFormField(
                        decoration: const InputDecoration(
                          border: InputBorder.none,
                          labelText: 'Subject',
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 40),
                if (subject.isNotEmpty) Text('Subject: $subject'),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 25.0),
                  child: Container(
                    height: 150, // Increase the height here
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      border: Border.all(color: Colors.white),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.only(left: 20.0),
                      child: TextFormField(
                        decoration: const InputDecoration(
                          border: InputBorder.none,
                          labelText: 'Body',
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 40),
                if (body.isNotEmpty) Text('Body: $body'),
                const SizedBox(height: 16),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 25.0),
                  child: Container(
                    padding: const EdgeInsets.all(25),
                    decoration: BoxDecoration(
                      color: Colors.deepPurple,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Center(
                      child: Text(
                        'Send Email',
                        style: TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 50),
                      ),
                    ),
                  ),
                ),
                if (speechRecognitionErrorMessage.isNotEmpty)
                  Text(
                    speechRecognitionErrorMessage,
                    style: const TextStyle(color: Colors.red),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
